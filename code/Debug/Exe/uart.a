;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdio.h>
;
;int start = 0;
;int count = 0;
;char r[];
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000F // Delay needed for the stabilization of the ADC input voltage
; 0000 0010 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0011 // Start the AD conversion
; 0000 0012 ADCSRA= ADCSRA|0x40; //0x40 = 0b0100 0000
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0013 // Wait for the AD conversion to complete
; 0000 0014 while ((ADCSRA & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0015 ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0016 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0017 }
;PCODE: $00000021 VOL: 0
;void uart_char_send(unsigned char chr){
; 0000 0018 void uart_char_send(unsigned char chr){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0019     while (!(UCSRA & (1<<UDRE))) {}; //cho den khi bit UDRE=1
;PCODE: $00000024 VOL: 0
;	chr -> Y+0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 001A             UDR=chr;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001B }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;//chuong trinh con phat mot chuoi ky tu
;void uart_string_send(unsigned char *txt){
; 0000 001D void uart_string_send(unsigned char *txt){
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 001E     unsigned char n, i;
; 0000 001F     n=strlen(txt); //Dem so ky tu
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;	*txt -> Y+2
;	n -> R17
;	i -> R16
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0020           for (i=0; i<n; i++){
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0021             uart_char_send(txt[i]);    //phat du lieu
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0022             }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0023 }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0025 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0026 char data;
; 0000 0027 data=UDR;
;PCODE: $00000053 VOL: 0
;	data -> R17
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0028 uart_char_send(data);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0029 
; 0000 002A     if (data =='a')
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 002B     {
; 0000 002C      PORTC.0=1;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 002D      }
; 0000 002E 
; 0000 002F     if (data =='b')
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0030      {
; 0000 0031      PORTC.0=0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0032       }
; 0000 0033      if (data =='c')
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0034     {
; 0000 0035      PORTC.1=1;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0036      }
; 0000 0037 
; 0000 0038     if (data =='d')
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0039      {
; 0000 003A      PORTC.1=0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 003B       }
; 0000 003C }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;unsigned long ADC_out;
;unsigned long dienap;
;
;unsigned char tram,chuc,dvi;
;unsigned long nhietdo;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0044 {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0045 // Place your code here
; 0000 0046     start = 0;
;PCODE: $00000076 VOL: 0
; 0000 0047     PORTD.4 = 1;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0048 }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 004C {
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004D // Place your code here
; 0000 004E    start = 1;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 004F }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0053 {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0054 // Reinitialize Timer 0 value
; 0000 0055 TCNT0=0x83;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0056 // Place your code here
; 0000 0057 count++ ;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0058     if(count >= 500 && start == 1){
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0059         PORTD.4 = ~ PORTD.4;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 005A         // read  sensor   and send uart
; 0000 005B         ADC_out=read_adc(0);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 005C         dienap = ADC_out*5000/1023;//theo mV
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 005D         nhietdo = dienap/10;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 005E         sprintf(r,"%d\n",nhietdo);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 005F         uart_string_send(r);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0060     }
; 0000 0061 }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0065 {
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0066 // Reinitialize Timer2 value
; 0000 0067 TCNT2=0x83;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0068 // Place your code here
; 0000 0069 
; 0000 006A }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;void button (){
; 0000 006B void button (){
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 006C if (PINB.6 == 0){   // den 1
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 006D     PORTC.0 = ~PORTC.0;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 006E   while(PINB.6 == 0);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 006F }
; 0000 0070 if(PINB.7 == 0)  {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0071     PORTC.1 = ~PORTC.1;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0072   while(PINB.7 == 0);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0073 }
; 0000 0074 }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;
;void main(void)
; 0000 0077 {
;PCODE: $000000F1 VOL: 0
; 0000 0078 
; 0000 0079 
; 0000 007A PORTB.6 = 1;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 007B DDRD.6 = 0;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 007C PORTB.7 = 1;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 007D DDRD.7 = 0;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 007E 
; 0000 007F PORTC=0x00;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0080 DDRC=0xff;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0081 
; 0000 0082 PORTD=0xfe;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0083 DDRD=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0084 PORTD.4 = 0;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0085 DDRD.4 = 1;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0086 
; 0000 0087 PORTD.2 = 1;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0088 DDRD.2 = 0;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0089 PORTD.3 = 1;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 008A DDRD.3 = 0;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 008B // Timer/Counter 0 initialization
; 0000 008C // Clock source: System Clock
; 0000 008D // Clock value: 125.000 kHz
; 0000 008E // Mode: Normal top=0xFF
; 0000 008F // OC0 output: Disconnected
; 0000 0090 // Timer Period: 1 ms
; 0000 0091 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0092 TCNT0=0x83;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0093 OCR0=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0094 
; 0000 0095 
; 0000 0096 
; 0000 0097 // Timer/Counter 2 initialization
; 0000 0098 // Clock source: System Clock
; 0000 0099 // Clock value: 125.000 kHz
; 0000 009A // Mode: Normal top=0xFF
; 0000 009B // OC2 output: Disconnected
; 0000 009C // Timer Period: 1 ms
; 0000 009D ASSR=0<<AS2;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 009E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 009F TCNT2=0x83;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00A0 OCR2=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00A1 
; 0000 00A2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A3 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00A4 
; 0000 00A5 // INT0: On
; 0000 00A6 // INT0 Mode: Falling Edge
; 0000 00A7 // INT1: On
; 0000 00A8 // INT1 Mode: Falling Edge
; 0000 00A9 // INT2: Off
; 0000 00AA GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00AB MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00AC MCUCSR=(0<<ISC2);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00AD GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00AE 
; 0000 00AF // USART initialization
; 0000 00B0 // USART enable
; 0000 00B1 UCSRA=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00B2 UCSRB=0x98;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00B3 UCSRC=0x86;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00B4 UBRRH=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00B5 UBRRL=0x33;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00B6 
; 0000 00B7 
; 0000 00B8 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00B9 ADCSRA=0x83;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00BA 
; 0000 00BB // Global enable interrupts
; 0000 00BC #asm("sei")
;PCODE: $00000135 VOL: 0
	sei
;PCODE: $00000136 VOL: 0
; 0000 00BD 
; 0000 00BE while (1)
;PCODE: $00000137 VOL: 0
; 0000 00BF       {
; 0000 00C0 
; 0000 00C1         if (start == 0)
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00C2         {
; 0000 00C3              PORTD.4 = 1;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00C4              PORTC.0 = 0;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00C5              PORTC.1 = 0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00C6         }
; 0000 00C7 
; 0000 00C8          else if(start == 1)
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00C9          {
; 0000 00CA           button();
;PCODE: $00000145 VOL: 0
; 0000 00CB         }
; 0000 00CC 
; 0000 00CD 
; 0000 00CE       }
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00CF }
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
