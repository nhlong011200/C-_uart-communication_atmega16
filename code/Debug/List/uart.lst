
AVRASM ver. 2.1.30  D:\TBNV_KTGN\GiuaKi_TBNV\code\Debug\List\uart.asm Fri Mar 18 10:08:45 2022

D:\TBNV_KTGN\GiuaKi_TBNV\code\Debug\List\uart.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\TBNV_KTGN\GiuaKi_TBNV\code\Debug\List\uart.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\TBNV_KTGN\GiuaKi_TBNV\code\Debug\List\uart.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\TBNV_KTGN\GiuaKi_TBNV\code\Debug\List\uart.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\TBNV_KTGN\GiuaKi_TBNV\code\Debug\List\uart.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\TBNV_KTGN\GiuaKi_TBNV\code\Debug\List\uart.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\TBNV_KTGN\GiuaKi_TBNV\code\Debug\List\uart.asm(1094): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _start=R4
                 	.DEF _start_msb=R5
                 	.DEF _count=R6
                 	.DEF _count_msb=R7
                 	.DEF _tram=R9
                 	.DEF _chuc=R8
                 	.DEF _dvi=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 00a5 	JMP  _ext_int0_isr
000004 940c 00ad 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 012b 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00b5 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0091 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000035 6425
000036 000a      	.DB  0x25,0x64,0xA,0x0
                 
                 __GLOBAL_INI_TBL:
000037 0004      	.DW  0x04
000038 0004      	.DW  0x04
000039 0066      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 0143 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdio.h>
                 ;
                 ;int start = 0;
                 ;int count = 0;
                 ;char r[];
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 000D {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 000E ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
000068 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000069 81e8      	LD   R30,Y
00006a b9e7      	OUT  0x7,R30
                 ; 0000 000F // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0010 delay_us(10);
                +
00006b e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00006c 958a     +DEC R24
00006d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0011 // Start the AD conversion
                 ; 0000 0012 ADCSRA= ADCSRA|0x40; //0x40 = 0b0100 0000
00006e 9a36      	SBI  0x6,6
                 ; 0000 0013 // Wait for the AD conversion to complete
                 ; 0000 0014 while ((ADCSRA & 0x10)==0);
                 _0x3:
00006f 9b34      	SBIS 0x6,4
000070 cffe      	RJMP _0x3
                 ; 0000 0015 ADCSRA|=0x10;
000071 9a34      	SBI  0x6,4
                 ; 0000 0016 return ADCW;
000072 b1e4      	IN   R30,0x4
000073 b1f5      	IN   R31,0x4+1
000074 c005      	RJMP _0x2060002
                 ; 0000 0017 }
                 ; .FEND
                 ;void uart_char_send(unsigned char chr){
                 ; 0000 0018 void uart_char_send(unsigned char chr){
                 _uart_char_send:
                 ; .FSTART _uart_char_send
                 ; 0000 0019     while (!(UCSRA & (1<<UDRE))) {}; //cho den khi bit UDRE=1
000075 93aa      	ST   -Y,R26
                 ;	chr -> Y+0
                 _0x6:
000076 9b5d      	SBIS 0xB,5
000077 cffe      	RJMP _0x6
                 ; 0000 001A             UDR=chr;
000078 81e8      	LD   R30,Y
000079 b9ec      	OUT  0xC,R30
                 ; 0000 001B }
                 _0x2060002:
00007a 9621      	ADIW R28,1
00007b 9508      	RET
                 ; .FEND
                 ;//chuong trinh con phat mot chuoi ky tu
                 ;void uart_string_send(unsigned char *txt){
                 ; 0000 001D void uart_string_send(unsigned char *txt){
                 _uart_string_send:
                 ; .FSTART _uart_string_send
                 ; 0000 001E     unsigned char n, i;
                 ; 0000 001F     n=strlen(txt); //Dem so ky tu
00007c 940e 0348 	CALL SUBOPT_0x0
                 ;	*txt -> Y+2
                 ;	n -> R17
                 ;	i -> R16
00007e 940e 018b 	CALL _strlen
000080 2f1e      	MOV  R17,R30
                 ; 0000 0020           for (i=0; i<n; i++){
000081 e000      	LDI  R16,LOW(0)
                 _0xA:
000082 1701      	CP   R16,R17
000083 f448      	BRSH _0xB
                 ; 0000 0021             uart_char_send(txt[i]);    //phat du lieu
000084 81aa      	LDD  R26,Y+2
000085 81bb      	LDD  R27,Y+2+1
000086 27ee      	CLR  R30
000087 0fa0      	ADD  R26,R16
000088 1fbe      	ADC  R27,R30
000089 91ac      	LD   R26,X
00008a dfea      	RCALL _uart_char_send
                 ; 0000 0022             }
00008b 5f0f      	SUBI R16,-1
00008c cff5      	RJMP _0xA
                 _0xB:
                 ; 0000 0023 }
00008d 8119      	LDD  R17,Y+1
00008e 8108      	LDD  R16,Y+0
00008f 9624      	ADIW R28,4
000090 9508      	RET
                 ; .FEND
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0025 {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000091 940e 034f 	CALL SUBOPT_0x1
                 ; 0000 0026 char data;
                 ; 0000 0027 data=UDR;
000093 931a      	ST   -Y,R17
                 ;	data -> R17
000094 b11c      	IN   R17,12
                 ; 0000 0028 uart_char_send(data);
000095 2fa1      	MOV  R26,R17
000096 dfde      	RCALL _uart_char_send
                 ; 0000 0029 
                 ; 0000 002A     if (data =='a')
000097 3611      	CPI  R17,97
000098 f409      	BRNE _0xC
                 ; 0000 002B     {
                 ; 0000 002C      PORTC.0=1;
000099 9aa8      	SBI  0x15,0
                 ; 0000 002D      }
                 ; 0000 002E 
                 ; 0000 002F     if (data =='b')
                 _0xC:
00009a 3612      	CPI  R17,98
00009b f409      	BRNE _0xF
                 ; 0000 0030      {
                 ; 0000 0031      PORTC.0=0;
00009c 98a8      	CBI  0x15,0
                 ; 0000 0032       }
                 ; 0000 0033      if (data =='c')
                 _0xF:
00009d 3613      	CPI  R17,99
00009e f409      	BRNE _0x12
                 ; 0000 0034     {
                 ; 0000 0035      PORTC.1=1;
00009f 9aa9      	SBI  0x15,1
                 ; 0000 0036      }
                 ; 0000 0037 
                 ; 0000 0038     if (data =='d')
                 _0x12:
0000a0 3614      	CPI  R17,100
0000a1 f409      	BRNE _0x15
                 ; 0000 0039      {
                 ; 0000 003A      PORTC.1=0;
0000a2 98a9      	CBI  0x15,1
                 ; 0000 003B       }
                 ; 0000 003C }
                 _0x15:
0000a3 9119      	LD   R17,Y+
0000a4 c078      	RJMP _0x4C
                 ; .FEND
                 ;unsigned long ADC_out;
                 ;unsigned long dienap;
                 ;
                 ;unsigned char tram,chuc,dvi;
                 ;unsigned long nhietdo;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0044 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000a5 93ea      	ST   -Y,R30
0000a6 b7ef      	IN   R30,SREG
                 ; 0000 0045 // Place your code here
                 ; 0000 0046     start = 0;
0000a7 2444      	CLR  R4
0000a8 2455      	CLR  R5
                 ; 0000 0047     PORTD.4 = 1;
0000a9 9a94      	SBI  0x12,4
                 ; 0000 0048 }
0000aa bfef      	OUT  SREG,R30
0000ab 91e9      	LD   R30,Y+
0000ac 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 004C {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0000ad 93ea      	ST   -Y,R30
0000ae 93fa      	ST   -Y,R31
                 ; 0000 004D // Place your code here
                 ; 0000 004E    start = 1;
0000af e0e1      	LDI  R30,LOW(1)
0000b0 e0f0      	LDI  R31,HIGH(1)
0000b1 012f      	MOVW R4,R30
                 ; 0000 004F }
0000b2 91f9      	LD   R31,Y+
0000b3 91e9      	LD   R30,Y+
0000b4 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0053 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000b5 940e 034f 	CALL SUBOPT_0x1
                 ; 0000 0054 // Reinitialize Timer 0 value
                 ; 0000 0055 TCNT0=0x83;
0000b7 e8e3      	LDI  R30,LOW(131)
0000b8 bfe2      	OUT  0x32,R30
                 ; 0000 0056 // Place your code here
                 ; 0000 0057 count++ ;
0000b9 01f3      	MOVW R30,R6
0000ba 9631      	ADIW R30,1
0000bb 013f      	MOVW R6,R30
                 ; 0000 0058     if(count >= 500 && start == 1){
0000bc efe4      	LDI  R30,LOW(500)
0000bd e0f1      	LDI  R31,HIGH(500)
0000be 166e      	CP   R6,R30
0000bf 067f      	CPC  R7,R31
0000c0 f02c      	BRLT _0x1B
0000c1 e0e1      	LDI  R30,LOW(1)
0000c2 e0f0      	LDI  R31,HIGH(1)
0000c3 15e4      	CP   R30,R4
0000c4 05f5      	CPC  R31,R5
0000c5 f009      	BREQ _0x1C
                 _0x1B:
0000c6 c056      	RJMP _0x1A
                 _0x1C:
                 ; 0000 0059         PORTD.4 = ~ PORTD.4;
0000c7 9b94      	SBIS 0x12,4
0000c8 c002      	RJMP _0x1D
0000c9 9894      	CBI  0x12,4
0000ca c001      	RJMP _0x1E
                 _0x1D:
0000cb 9a94      	SBI  0x12,4
                 _0x1E:
                 ; 0000 005A         // read  sensor   and send uart
                 ; 0000 005B         ADC_out=read_adc(0);
0000cc e0a0      	LDI  R26,LOW(0)
0000cd df9a      	RCALL _read_adc
0000ce 2766      	CLR  R22
0000cf 2777      	CLR  R23
0000d0 93e0 0161 	STS  _ADC_out,R30
0000d2 93f0 0162 	STS  _ADC_out+1,R31
0000d4 9360 0163 	STS  _ADC_out+2,R22
0000d6 9370 0164 	STS  _ADC_out+3,R23
                 ; 0000 005C         dienap = ADC_out*5000/1023;//theo mV
                +
0000d8 e8a8     +LDI R26 , LOW ( 0x1388 )
0000d9 e1b3     +LDI R27 , HIGH ( 0x1388 )
0000da e080     +LDI R24 , BYTE3 ( 0x1388 )
0000db e090     +LDI R25 , BYTE4 ( 0x1388 )
                 	__GETD2N 0x1388
0000dc 940e 0391 	CALL __MULD12U
0000de 01df      	MOVW R26,R30
0000df 01cb      	MOVW R24,R22
                +
0000e0 efef     +LDI R30 , LOW ( 0x3FF )
0000e1 e0f3     +LDI R31 , HIGH ( 0x3FF )
0000e2 e060     +LDI R22 , BYTE3 ( 0x3FF )
0000e3 e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
0000e4 940e 03b1 	CALL __DIVD21U
0000e6 93e0 0165 	STS  _dienap,R30
0000e8 93f0 0166 	STS  _dienap+1,R31
0000ea 9360 0167 	STS  _dienap+2,R22
0000ec 9370 0168 	STS  _dienap+3,R23
                 ; 0000 005D         nhietdo = dienap/10;
0000ee 91a0 0165 	LDS  R26,_dienap
0000f0 91b0 0166 	LDS  R27,_dienap+1
0000f2 9180 0167 	LDS  R24,_dienap+2
0000f4 9190 0168 	LDS  R25,_dienap+3
                +
0000f6 e0ea     +LDI R30 , LOW ( 0xA )
0000f7 e0f0     +LDI R31 , HIGH ( 0xA )
0000f8 e060     +LDI R22 , BYTE3 ( 0xA )
0000f9 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
0000fa 940e 03b1 	CALL __DIVD21U
0000fc 93e0 0169 	STS  _nhietdo,R30
0000fe 93f0 016a 	STS  _nhietdo+1,R31
000100 9360 016b 	STS  _nhietdo+2,R22
000102 9370 016c 	STS  _nhietdo+3,R23
                 ; 0000 005E         sprintf(r,"%d\n",nhietdo);
000104 e6e0      	LDI  R30,LOW(_r)
000105 e0f1      	LDI  R31,HIGH(_r)
000106 93fa      	ST   -Y,R31
000107 93ea      	ST   -Y,R30
                +
000108 e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000109 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00010a 93fa      	ST   -Y,R31
00010b 93ea      	ST   -Y,R30
00010c 91e0 0169 	LDS  R30,_nhietdo
00010e 91f0 016a 	LDS  R31,_nhietdo+1
000110 9160 016b 	LDS  R22,_nhietdo+2
000112 9170 016c 	LDS  R23,_nhietdo+3
000114 940e 03de 	CALL __PUTPARD1
000116 e084      	LDI  R24,4
000117 940e 0314 	CALL _sprintf
000119 9628      	ADIW R28,8
                 ; 0000 005F         uart_string_send(r);
00011a e6a0      	LDI  R26,LOW(_r)
00011b e0b1      	LDI  R27,HIGH(_r)
00011c df5f      	RCALL _uart_string_send
                 ; 0000 0060     }
                 ; 0000 0061 }
                 _0x1A:
                 _0x4C:
00011d 91e9      	LD   R30,Y+
00011e bfef      	OUT  SREG,R30
00011f 91f9      	LD   R31,Y+
000120 91e9      	LD   R30,Y+
000121 91b9      	LD   R27,Y+
000122 91a9      	LD   R26,Y+
000123 9199      	LD   R25,Y+
000124 9189      	LD   R24,Y+
000125 9179      	LD   R23,Y+
000126 9169      	LD   R22,Y+
000127 90f9      	LD   R15,Y+
000128 9019      	LD   R1,Y+
000129 9009      	LD   R0,Y+
00012a 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0065 {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
00012b 93ea      	ST   -Y,R30
                 ; 0000 0066 // Reinitialize Timer2 value
                 ; 0000 0067 TCNT2=0x83;
00012c e8e3      	LDI  R30,LOW(131)
00012d bde4      	OUT  0x24,R30
                 ; 0000 0068 // Place your code here
                 ; 0000 0069 
                 ; 0000 006A }
00012e 91e9      	LD   R30,Y+
00012f 9518      	RETI
                 ; .FEND
                 ;void button (){
                 ; 0000 006B void button (){
                 _button:
                 ; .FSTART _button
                 ; 0000 006C if (PINB.6 == 0){   // den 1
000130 99b6      	SBIC 0x16,6
000131 c007      	RJMP _0x1F
                 ; 0000 006D     PORTC.0 = ~PORTC.0;
000132 9ba8      	SBIS 0x15,0
000133 c002      	RJMP _0x20
000134 98a8      	CBI  0x15,0
000135 c001      	RJMP _0x21
                 _0x20:
000136 9aa8      	SBI  0x15,0
                 _0x21:
                 ; 0000 006E   while(PINB.6 == 0);
                 _0x22:
000137 9bb6      	SBIS 0x16,6
000138 cffe      	RJMP _0x22
                 ; 0000 006F }
                 ; 0000 0070 if(PINB.7 == 0)  {
                 _0x1F:
000139 99b7      	SBIC 0x16,7
00013a c007      	RJMP _0x25
                 ; 0000 0071     PORTC.1 = ~PORTC.1;
00013b 9ba9      	SBIS 0x15,1
00013c c002      	RJMP _0x26
00013d 98a9      	CBI  0x15,1
00013e c001      	RJMP _0x27
                 _0x26:
00013f 9aa9      	SBI  0x15,1
                 _0x27:
                 ; 0000 0072   while(PINB.7 == 0);
                 _0x28:
000140 9bb7      	SBIS 0x16,7
000141 cffe      	RJMP _0x28
                 ; 0000 0073 }
                 ; 0000 0074 }
                 _0x25:
000142 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0077 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0078 
                 ; 0000 0079 
                 ; 0000 007A PORTB.6 = 1;
000143 9ac6      	SBI  0x18,6
                 ; 0000 007B DDRD.6 = 0;
000144 988e      	CBI  0x11,6
                 ; 0000 007C PORTB.7 = 1;
000145 9ac7      	SBI  0x18,7
                 ; 0000 007D DDRD.7 = 0;
000146 988f      	CBI  0x11,7
                 ; 0000 007E 
                 ; 0000 007F PORTC=0x00;
000147 e0e0      	LDI  R30,LOW(0)
000148 bbe5      	OUT  0x15,R30
                 ; 0000 0080 DDRC=0xff;
000149 efef      	LDI  R30,LOW(255)
00014a bbe4      	OUT  0x14,R30
                 ; 0000 0081 
                 ; 0000 0082 PORTD=0xfe;
00014b efee      	LDI  R30,LOW(254)
00014c bbe2      	OUT  0x12,R30
                 ; 0000 0083 DDRD=0x00;
00014d e0e0      	LDI  R30,LOW(0)
00014e bbe1      	OUT  0x11,R30
                 ; 0000 0084 PORTD.4 = 0;
00014f 9894      	CBI  0x12,4
                 ; 0000 0085 DDRD.4 = 1;
000150 9a8c      	SBI  0x11,4
                 ; 0000 0086 
                 ; 0000 0087 PORTD.2 = 1;
000151 9a92      	SBI  0x12,2
                 ; 0000 0088 DDRD.2 = 0;
000152 988a      	CBI  0x11,2
                 ; 0000 0089 PORTD.3 = 1;
000153 9a93      	SBI  0x12,3
                 ; 0000 008A DDRD.3 = 0;
000154 988b      	CBI  0x11,3
                 ; 0000 008B // Timer/Counter 0 initialization
                 ; 0000 008C // Clock source: System Clock
                 ; 0000 008D // Clock value: 125.000 kHz
                 ; 0000 008E // Mode: Normal top=0xFF
                 ; 0000 008F // OC0 output: Disconnected
                 ; 0000 0090 // Timer Period: 1 ms
                 ; 0000 0091 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000155 e0e3      	LDI  R30,LOW(3)
000156 bfe3      	OUT  0x33,R30
                 ; 0000 0092 TCNT0=0x83;
000157 e8e3      	LDI  R30,LOW(131)
000158 bfe2      	OUT  0x32,R30
                 ; 0000 0093 OCR0=0x00;
000159 e0e0      	LDI  R30,LOW(0)
00015a bfec      	OUT  0x3C,R30
                 ; 0000 0094 
                 ; 0000 0095 
                 ; 0000 0096 
                 ; 0000 0097 // Timer/Counter 2 initialization
                 ; 0000 0098 // Clock source: System Clock
                 ; 0000 0099 // Clock value: 125.000 kHz
                 ; 0000 009A // Mode: Normal top=0xFF
                 ; 0000 009B // OC2 output: Disconnected
                 ; 0000 009C // Timer Period: 1 ms
                 ; 0000 009D ASSR=0<<AS2;
00015b bde2      	OUT  0x22,R30
                 ; 0000 009E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
00015c e0e4      	LDI  R30,LOW(4)
00015d bde5      	OUT  0x25,R30
                 ; 0000 009F TCNT2=0x83;
00015e e8e3      	LDI  R30,LOW(131)
00015f bde4      	OUT  0x24,R30
                 ; 0000 00A0 OCR2=0x00;
000160 e0e0      	LDI  R30,LOW(0)
000161 bde3      	OUT  0x23,R30
                 ; 0000 00A1 
                 ; 0000 00A2 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00A3 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000162 e4e1      	LDI  R30,LOW(65)
000163 bfe9      	OUT  0x39,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // INT0: On
                 ; 0000 00A6 // INT0 Mode: Falling Edge
                 ; 0000 00A7 // INT1: On
                 ; 0000 00A8 // INT1 Mode: Falling Edge
                 ; 0000 00A9 // INT2: Off
                 ; 0000 00AA GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
000164 b7eb      	IN   R30,0x3B
000165 6ce0      	ORI  R30,LOW(0xC0)
000166 bfeb      	OUT  0x3B,R30
                 ; 0000 00AB MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
000167 e0ea      	LDI  R30,LOW(10)
000168 bfe5      	OUT  0x35,R30
                 ; 0000 00AC MCUCSR=(0<<ISC2);
000169 e0e0      	LDI  R30,LOW(0)
00016a bfe4      	OUT  0x34,R30
                 ; 0000 00AD GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
00016b ece0      	LDI  R30,LOW(192)
00016c bfea      	OUT  0x3A,R30
                 ; 0000 00AE 
                 ; 0000 00AF // USART initialization
                 ; 0000 00B0 // USART enable
                 ; 0000 00B1 UCSRA=0x00;
00016d e0e0      	LDI  R30,LOW(0)
00016e b9eb      	OUT  0xB,R30
                 ; 0000 00B2 UCSRB=0x98;
00016f e9e8      	LDI  R30,LOW(152)
000170 b9ea      	OUT  0xA,R30
                 ; 0000 00B3 UCSRC=0x86;
000171 e8e6      	LDI  R30,LOW(134)
000172 bde0      	OUT  0x20,R30
                 ; 0000 00B4 UBRRH=0x00;
000173 e0e0      	LDI  R30,LOW(0)
000174 bde0      	OUT  0x20,R30
                 ; 0000 00B5 UBRRL=0x33;
000175 e3e3      	LDI  R30,LOW(51)
000176 b9e9      	OUT  0x9,R30
                 ; 0000 00B6 
                 ; 0000 00B7 
                 ; 0000 00B8 ADMUX=ADC_VREF_TYPE & 0xff;
000177 e0e0      	LDI  R30,LOW(0)
000178 b9e7      	OUT  0x7,R30
                 ; 0000 00B9 ADCSRA=0x83;
000179 e8e3      	LDI  R30,LOW(131)
00017a b9e6      	OUT  0x6,R30
                 ; 0000 00BA 
                 ; 0000 00BB // Global enable interrupts
                 ; 0000 00BC #asm("sei")
00017b 9478      	sei
                 ; 0000 00BD 
                 ; 0000 00BE while (1)
                 _0x3F:
                 ; 0000 00BF       {
                 ; 0000 00C0 
                 ; 0000 00C1         if (start == 0)
00017c 2c04      	MOV  R0,R4
00017d 2805      	OR   R0,R5
00017e f421      	BRNE _0x42
                 ; 0000 00C2         {
                 ; 0000 00C3              PORTD.4 = 1;
00017f 9a94      	SBI  0x12,4
                 ; 0000 00C4              PORTC.0 = 0;
000180 98a8      	CBI  0x15,0
                 ; 0000 00C5              PORTC.1 = 0;
000181 98a9      	CBI  0x15,1
                 ; 0000 00C6         }
                 ; 0000 00C7 
                 ; 0000 00C8          else if(start == 1)
000182 c006      	RJMP _0x49
                 _0x42:
000183 e0e1      	LDI  R30,LOW(1)
000184 e0f0      	LDI  R31,HIGH(1)
000185 15e4      	CP   R30,R4
000186 05f5      	CPC  R31,R5
000187 f409      	BRNE _0x4A
                 ; 0000 00C9          {
                 ; 0000 00CA           button();
000188 dfa7      	RCALL _button
                 ; 0000 00CB         }
                 ; 0000 00CC 
                 ; 0000 00CD 
                 ; 0000 00CE       }
                 _0x4A:
                 _0x49:
000189 cff2      	RJMP _0x3F
                 ; 0000 00CF }
                 _0x4B:
00018a cfff      	RJMP _0x4B
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00018b 93ba      	ST   -Y,R27
00018c 93aa      	ST   -Y,R26
00018d 91a9          ld   r26,y+
00018e 91b9          ld   r27,y+
00018f 27ee          clr  r30
000190 27ff          clr  r31
                 strlen0:
000191 916d          ld   r22,x+
000192 2366          tst  r22
000193 f011          breq strlen1
000194 9631          adiw r30,1
000195 cffb          rjmp strlen0
                 strlen1:
000196 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000197 93ba      	ST   -Y,R27
000198 93aa      	ST   -Y,R26
000199 27aa          clr  r26
00019a 27bb          clr  r27
00019b 91e9          ld   r30,y+
00019c 91f9          ld   r31,y+
                 strlenf0:
00019d 9005      	lpm  r0,z+
00019e 2000          tst  r0
00019f f011          breq strlenf1
0001a0 9611          adiw r26,1
0001a1 cffb          rjmp strlenf0
                 strlenf1:
0001a2 01fd          movw r30,r26
0001a3 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001a4 940e 0348 	CALL SUBOPT_0x0
0001a6 9612      	ADIW R26,2
0001a7 940e 03d6 	CALL __GETW1P
0001a9 9730      	SBIW R30,0
0001aa f159      	BREQ _0x2020010
0001ab 81aa      	LDD  R26,Y+2
0001ac 81bb      	LDD  R27,Y+2+1
0001ad 9614      	ADIW R26,4
0001ae 940e 03d6 	CALL __GETW1P
0001b0 018f      	MOVW R16,R30
0001b1 9730      	SBIW R30,0
0001b2 f061      	BREQ _0x2020012
                +
0001b3 3002     +CPI R16 , LOW ( 2 )
0001b4 e0e0     +LDI R30 , HIGH ( 2 )
0001b5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001b6 f098      	BRLO _0x2020013
0001b7 01f8      	MOVW R30,R16
0001b8 9731      	SBIW R30,1
0001b9 018f      	MOVW R16,R30
                +
0001ba 81aa     +LDD R26 , Y + 2
0001bb 81bb     +LDD R27 , Y + 2 + 1
0001bc 9614     +ADIW R26 , 4
0001bd 93ed     +ST X + , R30
0001be 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0001bf 81aa      	LDD  R26,Y+2
0001c0 81bb      	LDD  R27,Y+2+1
0001c1 9612      	ADIW R26,2
0001c2 91ed      	LD   R30,X+
0001c3 91fd      	LD   R31,X+
0001c4 9631      	ADIW R30,1
0001c5 93fe      	ST   -X,R31
0001c6 93ee      	ST   -X,R30
0001c7 9731      	SBIW R30,1
0001c8 81ac      	LDD  R26,Y+4
0001c9 83a0      	STD  Z+0,R26
                 _0x2020013:
0001ca 81aa      	LDD  R26,Y+2
0001cb 81bb      	LDD  R27,Y+2+1
0001cc 940e 03d6 	CALL __GETW1P
0001ce 23ff      	TST  R31
0001cf f02a      	BRMI _0x2020014
0001d0 91ed      	LD   R30,X+
0001d1 91fd      	LD   R31,X+
0001d2 9631      	ADIW R30,1
0001d3 93fe      	ST   -X,R31
0001d4 93ee      	ST   -X,R30
                 _0x2020014:
0001d5 c006      	RJMP _0x2020015
                 _0x2020010:
0001d6 81aa      	LDD  R26,Y+2
0001d7 81bb      	LDD  R27,Y+2+1
0001d8 efef      	LDI  R30,LOW(65535)
0001d9 efff      	LDI  R31,HIGH(65535)
0001da 93ed      	ST   X+,R30
0001db 93fc      	ST   X,R31
                 _0x2020015:
0001dc 8119      	LDD  R17,Y+1
0001dd 8108      	LDD  R16,Y+0
0001de 9625      	ADIW R28,5
0001df 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001e0 93ba      	ST   -Y,R27
0001e1 93aa      	ST   -Y,R26
0001e2 9726      	SBIW R28,6
0001e3 940e 03e3 	CALL __SAVELOCR6
0001e5 e010      	LDI  R17,0
0001e6 85ac      	LDD  R26,Y+12
0001e7 85bd      	LDD  R27,Y+12+1
0001e8 e0e0      	LDI  R30,LOW(0)
0001e9 e0f0      	LDI  R31,HIGH(0)
0001ea 93ed      	ST   X+,R30
0001eb 93fc      	ST   X,R31
                 _0x2020016:
0001ec 89ea      	LDD  R30,Y+18
0001ed 89fb      	LDD  R31,Y+18+1
0001ee 9631      	ADIW R30,1
0001ef 8bea      	STD  Y+18,R30
0001f0 8bfb      	STD  Y+18+1,R31
0001f1 9731      	SBIW R30,1
0001f2 91e4      	LPM  R30,Z
0001f3 2f2e      	MOV  R18,R30
0001f4 30e0      	CPI  R30,0
0001f5 f409      	BRNE PC+2
0001f6 c115      	RJMP _0x2020018
0001f7 2fe1      	MOV  R30,R17
0001f8 30e0      	CPI  R30,0
0001f9 f439      	BRNE _0x202001C
0001fa 3225      	CPI  R18,37
0001fb f411      	BRNE _0x202001D
0001fc e011      	LDI  R17,LOW(1)
0001fd c002      	RJMP _0x202001E
                 _0x202001D:
0001fe 940e 035d 	CALL SUBOPT_0x2
                 _0x202001E:
000200 c10a      	RJMP _0x202001B
                 _0x202001C:
000201 30e1      	CPI  R30,LOW(0x1)
000202 f4a9      	BRNE _0x202001F
000203 3225      	CPI  R18,37
000204 f419      	BRNE _0x2020020
000205 940e 035d 	CALL SUBOPT_0x2
000207 c102      	RJMP _0x20200CC
                 _0x2020020:
000208 e012      	LDI  R17,LOW(2)
000209 e040      	LDI  R20,LOW(0)
00020a e000      	LDI  R16,LOW(0)
00020b 322d      	CPI  R18,45
00020c f411      	BRNE _0x2020021
00020d e001      	LDI  R16,LOW(1)
00020e c0fc      	RJMP _0x202001B
                 _0x2020021:
00020f 322b      	CPI  R18,43
000210 f411      	BRNE _0x2020022
000211 e24b      	LDI  R20,LOW(43)
000212 c0f8      	RJMP _0x202001B
                 _0x2020022:
000213 3220      	CPI  R18,32
000214 f411      	BRNE _0x2020023
000215 e240      	LDI  R20,LOW(32)
000216 c0f4      	RJMP _0x202001B
                 _0x2020023:
000217 c002      	RJMP _0x2020024
                 _0x202001F:
000218 30e2      	CPI  R30,LOW(0x2)
000219 f439      	BRNE _0x2020025
                 _0x2020024:
00021a e050      	LDI  R21,LOW(0)
00021b e013      	LDI  R17,LOW(3)
00021c 3320      	CPI  R18,48
00021d f411      	BRNE _0x2020026
00021e 6800      	ORI  R16,LOW(128)
00021f c0eb      	RJMP _0x202001B
                 _0x2020026:
000220 c003      	RJMP _0x2020027
                 _0x2020025:
000221 30e3      	CPI  R30,LOW(0x3)
000222 f009      	BREQ PC+2
000223 c0e7      	RJMP _0x202001B
                 _0x2020027:
000224 3320      	CPI  R18,48
000225 f010      	BRLO _0x202002A
000226 332a      	CPI  R18,58
000227 f008      	BRLO _0x202002B
                 _0x202002A:
000228 c007      	RJMP _0x2020029
                 _0x202002B:
000229 e0aa      	LDI  R26,LOW(10)
00022a 9f5a      	MUL  R21,R26
00022b 2d50      	MOV  R21,R0
00022c 2fe2      	MOV  R30,R18
00022d 53e0      	SUBI R30,LOW(48)
00022e 0f5e      	ADD  R21,R30
00022f c0db      	RJMP _0x202001B
                 _0x2020029:
000230 2fe2      	MOV  R30,R18
000231 36e3      	CPI  R30,LOW(0x63)
000232 f449      	BRNE _0x202002F
000233 940e 0364 	CALL SUBOPT_0x3
000235 89e8      	LDD  R30,Y+16
000236 89f9      	LDD  R31,Y+16+1
000237 81a4      	LDD  R26,Z+4
000238 93aa      	ST   -Y,R26
000239 940e 036a 	CALL SUBOPT_0x4
00023b c0ce      	RJMP _0x2020030
                 _0x202002F:
00023c 37e3      	CPI  R30,LOW(0x73)
00023d f441      	BRNE _0x2020032
00023e 940e 0364 	CALL SUBOPT_0x3
000240 940e 0370 	CALL SUBOPT_0x5
000242 940e 018b 	CALL _strlen
000244 2f1e      	MOV  R17,R30
000245 c00a      	RJMP _0x2020033
                 _0x2020032:
000246 37e0      	CPI  R30,LOW(0x70)
000247 f461      	BRNE _0x2020035
000248 940e 0364 	CALL SUBOPT_0x3
00024a 940e 0370 	CALL SUBOPT_0x5
00024c 940e 0197 	CALL _strlenf
00024e 2f1e      	MOV  R17,R30
00024f 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000250 6002      	ORI  R16,LOW(2)
000251 770f      	ANDI R16,LOW(127)
000252 e030      	LDI  R19,LOW(0)
000253 c034      	RJMP _0x2020036
                 _0x2020035:
000254 36e4      	CPI  R30,LOW(0x64)
000255 f011      	BREQ _0x2020039
000256 36e9      	CPI  R30,LOW(0x69)
000257 f411      	BRNE _0x202003A
                 _0x2020039:
000258 6004      	ORI  R16,LOW(4)
000259 c002      	RJMP _0x202003B
                 _0x202003A:
00025a 37e5      	CPI  R30,LOW(0x75)
00025b f431      	BRNE _0x202003C
                 _0x202003B:
00025c e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00025d e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00025e 83ee      	STD  Y+6,R30
00025f 83ff      	STD  Y+6+1,R31
000260 e015      	LDI  R17,LOW(5)
000261 c00c      	RJMP _0x202003D
                 _0x202003C:
000262 35e8      	CPI  R30,LOW(0x58)
000263 f411      	BRNE _0x202003F
000264 6008      	ORI  R16,LOW(8)
000265 c003      	RJMP _0x2020040
                 _0x202003F:
000266 37e8      	CPI  R30,LOW(0x78)
000267 f009      	BREQ PC+2
000268 c0a1      	RJMP _0x2020071
                 _0x2020040:
000269 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00026a e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00026b 83ee      	STD  Y+6,R30
00026c 83ff      	STD  Y+6+1,R31
00026d e014      	LDI  R17,LOW(4)
                 _0x202003D:
00026e ff02      	SBRS R16,2
00026f c014      	RJMP _0x2020042
000270 940e 0364 	CALL SUBOPT_0x3
000272 940e 037a 	CALL SUBOPT_0x6
000274 85ab      	LDD  R26,Y+11
000275 23aa      	TST  R26
000276 f43a      	BRPL _0x2020043
000277 85ea      	LDD  R30,Y+10
000278 85fb      	LDD  R31,Y+10+1
000279 940e 038d 	CALL __ANEGW1
00027b 87ea      	STD  Y+10,R30
00027c 87fb      	STD  Y+10+1,R31
00027d e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00027e 3040      	CPI  R20,0
00027f f011      	BREQ _0x2020044
000280 5f1f      	SUBI R17,-LOW(1)
000281 c001      	RJMP _0x2020045
                 _0x2020044:
000282 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000283 c004      	RJMP _0x2020046
                 _0x2020042:
000284 940e 0364 	CALL SUBOPT_0x3
000286 940e 037a 	CALL SUBOPT_0x6
                 _0x2020046:
                 _0x2020036:
000288 fd00      	SBRC R16,0
000289 c011      	RJMP _0x2020047
                 _0x2020048:
00028a 1715      	CP   R17,R21
00028b f478      	BRSH _0x202004A
00028c ff07      	SBRS R16,7
00028d c008      	RJMP _0x202004B
00028e ff02      	SBRS R16,2
00028f c004      	RJMP _0x202004C
000290 7f0b      	ANDI R16,LOW(251)
000291 2f24      	MOV  R18,R20
000292 5011      	SUBI R17,LOW(1)
000293 c001      	RJMP _0x202004D
                 _0x202004C:
000294 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000295 c001      	RJMP _0x202004E
                 _0x202004B:
000296 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000297 940e 035d 	CALL SUBOPT_0x2
000299 5051      	SUBI R21,LOW(1)
00029a cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00029b 2f31      	MOV  R19,R17
00029c ff01      	SBRS R16,1
00029d c017      	RJMP _0x202004F
                 _0x2020050:
00029e 3030      	CPI  R19,0
00029f f0a1      	BREQ _0x2020052
0002a0 ff03      	SBRS R16,3
0002a1 c006      	RJMP _0x2020053
0002a2 81ee      	LDD  R30,Y+6
0002a3 81ff      	LDD  R31,Y+6+1
0002a4 9125      	LPM  R18,Z+
0002a5 83ee      	STD  Y+6,R30
0002a6 83ff      	STD  Y+6+1,R31
0002a7 c005      	RJMP _0x2020054
                 _0x2020053:
0002a8 81ae      	LDD  R26,Y+6
0002a9 81bf      	LDD  R27,Y+6+1
0002aa 912d      	LD   R18,X+
0002ab 83ae      	STD  Y+6,R26
0002ac 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002ad 940e 035d 	CALL SUBOPT_0x2
0002af 3050      	CPI  R21,0
0002b0 f009      	BREQ _0x2020055
0002b1 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002b2 5031      	SUBI R19,LOW(1)
0002b3 cfea      	RJMP _0x2020050
                 _0x2020052:
0002b4 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002b5 e320      	LDI  R18,LOW(48)
0002b6 81ee      	LDD  R30,Y+6
0002b7 81ff      	LDD  R31,Y+6+1
0002b8 940e 03da 	CALL __GETW1PF
0002ba 87e8      	STD  Y+8,R30
0002bb 87f9      	STD  Y+8+1,R31
0002bc 81ee      	LDD  R30,Y+6
0002bd 81ff      	LDD  R31,Y+6+1
0002be 9632      	ADIW R30,2
0002bf 83ee      	STD  Y+6,R30
0002c0 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002c1 85e8      	LDD  R30,Y+8
0002c2 85f9      	LDD  R31,Y+8+1
0002c3 85aa      	LDD  R26,Y+10
0002c4 85bb      	LDD  R27,Y+10+1
0002c5 17ae      	CP   R26,R30
0002c6 07bf      	CPC  R27,R31
0002c7 f050      	BRLO _0x202005C
0002c8 5f2f      	SUBI R18,-LOW(1)
0002c9 85a8      	LDD  R26,Y+8
0002ca 85b9      	LDD  R27,Y+8+1
0002cb 85ea      	LDD  R30,Y+10
0002cc 85fb      	LDD  R31,Y+10+1
0002cd 1bea      	SUB  R30,R26
0002ce 0bfb      	SBC  R31,R27
0002cf 87ea      	STD  Y+10,R30
0002d0 87fb      	STD  Y+10+1,R31
0002d1 cfef      	RJMP _0x202005A
                 _0x202005C:
0002d2 332a      	CPI  R18,58
0002d3 f028      	BRLO _0x202005D
0002d4 ff03      	SBRS R16,3
0002d5 c002      	RJMP _0x202005E
0002d6 5f29      	SUBI R18,-LOW(7)
0002d7 c001      	RJMP _0x202005F
                 _0x202005E:
0002d8 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002d9 fd04      	SBRC R16,4
0002da c01a      	RJMP _0x2020061
0002db 3321      	CPI  R18,49
0002dc f420      	BRSH _0x2020063
0002dd 85a8      	LDD  R26,Y+8
0002de 85b9      	LDD  R27,Y+8+1
0002df 9711      	SBIW R26,1
0002e0 f409      	BRNE _0x2020062
                 _0x2020063:
0002e1 c009      	RJMP _0x20200CD
                 _0x2020062:
0002e2 1753      	CP   R21,R19
0002e3 f010      	BRLO _0x2020067
0002e4 ff00      	SBRS R16,0
0002e5 c001      	RJMP _0x2020068
                 _0x2020067:
0002e6 c013      	RJMP _0x2020066
                 _0x2020068:
0002e7 e220      	LDI  R18,LOW(32)
0002e8 ff07      	SBRS R16,7
0002e9 c00b      	RJMP _0x2020069
0002ea e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002eb 6100      	ORI  R16,LOW(16)
0002ec ff02      	SBRS R16,2
0002ed c007      	RJMP _0x202006A
0002ee 7f0b      	ANDI R16,LOW(251)
0002ef 934a      	ST   -Y,R20
0002f0 940e 036a 	CALL SUBOPT_0x4
0002f2 3050      	CPI  R21,0
0002f3 f009      	BREQ _0x202006B
0002f4 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002f5 940e 035d 	CALL SUBOPT_0x2
0002f7 3050      	CPI  R21,0
0002f8 f009      	BREQ _0x202006C
0002f9 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002fa 5031      	SUBI R19,LOW(1)
0002fb 85a8      	LDD  R26,Y+8
0002fc 85b9      	LDD  R27,Y+8+1
0002fd 9712      	SBIW R26,2
0002fe f008      	BRLO _0x2020059
0002ff cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000300 ff00      	SBRS R16,0
000301 c008      	RJMP _0x202006D
                 _0x202006E:
000302 3050      	CPI  R21,0
000303 f031      	BREQ _0x2020070
000304 5051      	SUBI R21,LOW(1)
000305 e2e0      	LDI  R30,LOW(32)
000306 93ea      	ST   -Y,R30
000307 940e 036a 	CALL SUBOPT_0x4
000309 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00030a e010      	LDI  R17,LOW(0)
                 _0x202001B:
00030b cee0      	RJMP _0x2020016
                 _0x2020018:
00030c 85ac      	LDD  R26,Y+12
00030d 85bd      	LDD  R27,Y+12+1
00030e 940e 03d6 	CALL __GETW1P
000310 940e 03ea 	CALL __LOADLOCR6
000312 9664      	ADIW R28,20
000313 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000314 92ff      	PUSH R15
000315 2ef8      	MOV  R15,R24
000316 9726      	SBIW R28,6
000317 940e 03e5 	CALL __SAVELOCR4
000319 940e 0382 	CALL SUBOPT_0x7
00031b 9730      	SBIW R30,0
00031c f419      	BRNE _0x2020072
00031d efef      	LDI  R30,LOW(65535)
00031e efff      	LDI  R31,HIGH(65535)
00031f c023      	RJMP _0x2060001
                 _0x2020072:
000320 01de      	MOVW R26,R28
000321 9616      	ADIW R26,6
000322 940e 0389 	CALL __ADDW2R15
000324 018d      	MOVW R16,R26
000325 940e 0382 	CALL SUBOPT_0x7
000327 83ee      	STD  Y+6,R30
000328 83ff      	STD  Y+6+1,R31
000329 e0e0      	LDI  R30,LOW(0)
00032a 87e8      	STD  Y+8,R30
00032b 87e9      	STD  Y+8+1,R30
00032c 01de      	MOVW R26,R28
00032d 961a      	ADIW R26,10
00032e 940e 0389 	CALL __ADDW2R15
000330 940e 03d6 	CALL __GETW1P
000332 93fa      	ST   -Y,R31
000333 93ea      	ST   -Y,R30
000334 931a      	ST   -Y,R17
000335 930a      	ST   -Y,R16
000336 eae4      	LDI  R30,LOW(_put_buff_G101)
000337 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000338 93fa      	ST   -Y,R31
000339 93ea      	ST   -Y,R30
00033a 01de      	MOVW R26,R28
00033b 961a      	ADIW R26,10
00033c dea3      	RCALL __print_G101
00033d 019f      	MOVW R18,R30
00033e 81ae      	LDD  R26,Y+6
00033f 81bf      	LDD  R27,Y+6+1
000340 e0e0      	LDI  R30,LOW(0)
000341 93ec      	ST   X,R30
000342 01f9      	MOVW R30,R18
                 _0x2060001:
000343 940e 03ec 	CALL __LOADLOCR4
000345 962a      	ADIW R28,10
000346 90ff      	POP  R15
000347 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _r:
000160           	.BYTE 0x1
                 _ADC_out:
000161           	.BYTE 0x4
                 _dienap:
000165           	.BYTE 0x4
                 _nhietdo:
000169           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000348 93ba      	ST   -Y,R27
000349 93aa      	ST   -Y,R26
00034a 931a      	ST   -Y,R17
00034b 930a      	ST   -Y,R16
00034c 81aa      	LDD  R26,Y+2
00034d 81bb      	LDD  R27,Y+2+1
00034e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
00034f 920a      	ST   -Y,R0
000350 921a      	ST   -Y,R1
000351 92fa      	ST   -Y,R15
000352 936a      	ST   -Y,R22
000353 937a      	ST   -Y,R23
000354 938a      	ST   -Y,R24
000355 939a      	ST   -Y,R25
000356 93aa      	ST   -Y,R26
000357 93ba      	ST   -Y,R27
000358 93ea      	ST   -Y,R30
000359 93fa      	ST   -Y,R31
00035a b7ef      	IN   R30,SREG
00035b 93ea      	ST   -Y,R30
00035c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
00035d 932a      	ST   -Y,R18
00035e 85ad      	LDD  R26,Y+13
00035f 85be      	LDD  R27,Y+13+1
000360 85ef      	LDD  R30,Y+15
000361 89f8      	LDD  R31,Y+15+1
000362 9509      	ICALL
000363 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000364 89e8      	LDD  R30,Y+16
000365 89f9      	LDD  R31,Y+16+1
000366 9734      	SBIW R30,4
000367 8be8      	STD  Y+16,R30
000368 8bf9      	STD  Y+16+1,R31
000369 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00036a 85ad      	LDD  R26,Y+13
00036b 85be      	LDD  R27,Y+13+1
00036c 85ef      	LDD  R30,Y+15
00036d 89f8      	LDD  R31,Y+15+1
00036e 9509      	ICALL
00036f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
000370 89a8      	LDD  R26,Y+16
000371 89b9      	LDD  R27,Y+16+1
000372 9614      	ADIW R26,4
000373 940e 03d6 	CALL __GETW1P
000375 83ee      	STD  Y+6,R30
000376 83ff      	STD  Y+6+1,R31
000377 81ae      	LDD  R26,Y+6
000378 81bf      	LDD  R27,Y+6+1
000379 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00037a 89a8      	LDD  R26,Y+16
00037b 89b9      	LDD  R27,Y+16+1
00037c 9614      	ADIW R26,4
00037d 940e 03d6 	CALL __GETW1P
00037f 87ea      	STD  Y+10,R30
000380 87fb      	STD  Y+10+1,R31
000381 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000382 01de      	MOVW R26,R28
000383 961c      	ADIW R26,12
000384 940e 0389 	CALL __ADDW2R15
000386 940e 03d6 	CALL __GETW1P
000388 9508      	RET
                 
                 
                 	.CSEG
                 __ADDW2R15:
000389 2400      	CLR  R0
00038a 0daf      	ADD  R26,R15
00038b 1db0      	ADC  R27,R0
00038c 9508      	RET
                 
                 __ANEGW1:
00038d 95f1      	NEG  R31
00038e 95e1      	NEG  R30
00038f 40f0      	SBCI R31,0
000390 9508      	RET
                 
                 __MULD12U:
000391 9f7a      	MUL  R23,R26
000392 2d70      	MOV  R23,R0
000393 9f6b      	MUL  R22,R27
000394 0d70      	ADD  R23,R0
000395 9ff8      	MUL  R31,R24
000396 0d70      	ADD  R23,R0
000397 9fe9      	MUL  R30,R25
000398 0d70      	ADD  R23,R0
000399 9f6a      	MUL  R22,R26
00039a 2d60      	MOV  R22,R0
00039b 0d71      	ADD  R23,R1
00039c 9ffb      	MUL  R31,R27
00039d 0d60      	ADD  R22,R0
00039e 1d71      	ADC  R23,R1
00039f 9fe8      	MUL  R30,R24
0003a0 0d60      	ADD  R22,R0
0003a1 1d71      	ADC  R23,R1
0003a2 2788      	CLR  R24
0003a3 9ffa      	MUL  R31,R26
0003a4 2df0      	MOV  R31,R0
0003a5 0d61      	ADD  R22,R1
0003a6 1f78      	ADC  R23,R24
0003a7 9feb      	MUL  R30,R27
0003a8 0df0      	ADD  R31,R0
0003a9 1d61      	ADC  R22,R1
0003aa 1f78      	ADC  R23,R24
0003ab 9fea      	MUL  R30,R26
0003ac 2de0      	MOV  R30,R0
0003ad 0df1      	ADD  R31,R1
0003ae 1f68      	ADC  R22,R24
0003af 1f78      	ADC  R23,R24
0003b0 9508      	RET
                 
                 __DIVD21U:
0003b1 933f      	PUSH R19
0003b2 934f      	PUSH R20
0003b3 935f      	PUSH R21
0003b4 2400      	CLR  R0
0003b5 2411      	CLR  R1
0003b6 2744      	CLR  R20
0003b7 2755      	CLR  R21
0003b8 e230      	LDI  R19,32
                 __DIVD21U1:
0003b9 0faa      	LSL  R26
0003ba 1fbb      	ROL  R27
0003bb 1f88      	ROL  R24
0003bc 1f99      	ROL  R25
0003bd 1c00      	ROL  R0
0003be 1c11      	ROL  R1
0003bf 1f44      	ROL  R20
0003c0 1f55      	ROL  R21
0003c1 1a0e      	SUB  R0,R30
0003c2 0a1f      	SBC  R1,R31
0003c3 0b46      	SBC  R20,R22
0003c4 0b57      	SBC  R21,R23
0003c5 f428      	BRCC __DIVD21U2
0003c6 0e0e      	ADD  R0,R30
0003c7 1e1f      	ADC  R1,R31
0003c8 1f46      	ADC  R20,R22
0003c9 1f57      	ADC  R21,R23
0003ca c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0003cb 60a1      	SBR  R26,1
                 __DIVD21U3:
0003cc 953a      	DEC  R19
0003cd f759      	BRNE __DIVD21U1
0003ce 01fd      	MOVW R30,R26
0003cf 01bc      	MOVW R22,R24
0003d0 01d0      	MOVW R26,R0
0003d1 01ca      	MOVW R24,R20
0003d2 915f      	POP  R21
0003d3 914f      	POP  R20
0003d4 913f      	POP  R19
0003d5 9508      	RET
                 
                 __GETW1P:
0003d6 91ed      	LD   R30,X+
0003d7 91fc      	LD   R31,X
0003d8 9711      	SBIW R26,1
0003d9 9508      	RET
                 
                 __GETW1PF:
0003da 9005      	LPM  R0,Z+
0003db 91f4      	LPM  R31,Z
0003dc 2de0      	MOV  R30,R0
0003dd 9508      	RET
                 
                 __PUTPARD1:
0003de 937a      	ST   -Y,R23
0003df 936a      	ST   -Y,R22
0003e0 93fa      	ST   -Y,R31
0003e1 93ea      	ST   -Y,R30
0003e2 9508      	RET
                 
                 __SAVELOCR6:
0003e3 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003e4 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003e5 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003e6 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003e7 931a      	ST   -Y,R17
0003e8 930a      	ST   -Y,R16
0003e9 9508      	RET
                 
                 __LOADLOCR6:
0003ea 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003eb 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003ec 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003ed 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003ee 8119      	LDD  R17,Y+1
0003ef 8108      	LD   R16,Y
0003f0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  30 r1 :  13 r2 :   0 r3 :   0 r4 :   5 r5 :   4 r6 :   3 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  39 r17:  31 r18:  29 r19:  12 r20:  16 r21:  23 r22:  26 r23:  23 
r24:  26 r25:   8 r26:  81 r27:  42 r28:  13 r29:   1 r30: 211 r31:  81 
x  :  23 y  : 178 z  :  14 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  12 add   :  13 
adiw  :  23 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   1 brmi  :   1 brne  :  29 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  48 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  34 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   0 jmp   :  22 ld    :  33 ldd   :  74 ldi   : 103 
lds   :   8 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  18 movw  :  23 
mul   :  11 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  35 pop   :   4 push  :   4 rcall :   6 ret   :  25 
reti  :   4 rjmp  :  72 rol   :   7 ror   :   0 sbc   :   4 sbci  :   1 
sbi   :  14 sbic  :   2 sbis  :   7 sbiw  :  15 sbr   :   1 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  67 std   :  29 sts   :  12 sub   :   2 subi  :  14 swap  :   0 
tst   :   4 wdr   :   0 
Instructions used: 59 out of 116 (50.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007e2   1984     34   2018   16384  12.3%
[.dseg] 0x000060 0x00016d      0     13     13    1024   1.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
